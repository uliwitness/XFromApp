/* ================================================================================		PROJECT:	CarbonXCmd.h		PURPOSE:	Header for a Carbonized implementation of HyperCard's XCMD-Engine.		COPYRIGHT:	(c) Copyright 2001 by M. Uli Kusterer, all rights reserved.		REACH ME AT:				Internet:	witness@webLayout.com				URL:		http://www.weblayout.com/witness	   ============================================================================= */#ifndef CARBONXCMD_H#define CARBONXCMD_H/* --------------------------------------------------------------------------------	Headers:   ----------------------------------------------------------------------------- */#include	<MacTypes.h>/* --------------------------------------------------------------------------------	The XCMD Parameter block:		This is the means by which we pass parameters to our XCMDs and which is		used to pass data back and forth between us and the XCMD during callbacks.   ----------------------------------------------------------------------------- */#if PRAGMA_STRUCT_ALIGN#pragma options align=mac68k#endiftypedef pascal void	(*XCMDCallbackProcPtr)();typedef struct XCmdBlock{	short				paramCount;     	Handle				params[16];	Handle  			returnValue;      	Boolean				passFlag;	XCMDCallbackProcPtr	entryPoint;		// Entry Point used to call back into HyperCard.	short				request;  	short				result;  	long				inArgs[8];	long				outArgs[4];} XCmdBlock, *XCmdBlockPtr;/* --------------------------------------------------------------------------------	XWindow Event Info:		This is passed to an XCMD in params[0] whenever we send it an XWindow		event.   ----------------------------------------------------------------------------- */typedef struct XWEventInfo *XWEventInfoPtr;struct XWEventInfo{	EventRecord						event;	WindowPtr						eventWindow;	long							eventParams[9];	Handle							eventResult;};/* --------------------------------------------------------------------------------	XTalkObject objectKind values:   ----------------------------------------------------------------------------- */enum{	stackObj 				= 1,	bkgndObj 				= 2,	cardObj 				= 3,	fieldObj 				= 4,	buttonObj 				= 5};/* --------------------------------------------------------------------------------	XTalkObject:		Data structure to uniquely identify a HyperCard object. Only HyperCard 2.x   ----------------------------------------------------------------------------- */typedef struct XTalkObject *XTalkObjectPtr;struct XTalkObject{	short							objectKind;					/* stack, bkgnd, card, field, or button */	long							stackNum;					/* reference number of the source stack */	long							bkgndID;	long							cardID;	long							buttonID;	long							fieldID;};/* --------------------------------------------------------------------------------	PixInfo:		Data structure used when returning a graphic object's paint data. Only		SuperCard.   ----------------------------------------------------------------------------- */typedef struct PixInfo{    Handle theData;    CTabHandle theTable;    Rect bounds;    short colorFlag;    short rowBytes;    short penMode;} PixInfo, *PixInfoPtr;/* --------------------------------------------------------------------------------	StarInfo:		Data structure used when returning information on a project resource (aka		data fork resource). Only SuperCard.   ----------------------------------------------------------------------------- */typedef struct StarInfo{    long theType;    long theSize;    long theID;    long index;    Str255 theName;} StarInfo, *StarInfoPtr;#if PRAGMA_STRUCT_ALIGN#pragma options align=reset#endif/* --------------------------------------------------------------------------------	Return codes for callbacks:   ----------------------------------------------------------------------------- */enum {	xresSucc = 0,		// Everything fine.	xresFail,			// Failed. Error condition.	xresNotImp			// Callback not implemented. Guess the XCMD was written for another engine.};/* --------------------------------------------------------------------------------	XCMD request codes:		These identify the callbacks our XCMDs can send. These are the ones every		HyperCard clone (HyperCard 1.x, SuperCard etc.) have in common.   ----------------------------------------------------------------------------- */enum {  	xreqSendCardMessage = 1,	xreqEvalExpr,	xreqStringLength,	xreqStringMatch,	xreqSendHCMessage,	xreqZeroBytes,	xreqPasToZero,	xreqZeroToPas,	xreqStrToLong,	xreqStrToNum,	xreqStrToBool,	xreqStrToExt,	xreqLongToStr,	xreqNumToStr,	xreqNumToHex,	xreqBoolToStr,	xreqExtToStr,	xreqGetGlobal,	xreqSetGlobal,	xreqGetFieldByName,	xreqGetFieldByNum,	xreqGetFieldByID, 	xreqSetFieldByName,	xreqSetFieldByNum, 	xreqSetFieldByID,	xreqStringEqual, 	xreqReturnToPas,	xreqScanToReturn,			// #28.	xreqGetMaskAndData,			// #29 - undocumented [0] = BitMap* mask [1] = BitMap* data	xreqChangedMaskAndData,		// #30 - undocumented.	xreqScanToZero = 39};/* --------------------------------------------------------------------------------	XCMD request codes 2.0:		These are additional callbacks for XCMDs introduced with Apple HyperCard		2.0. The following list contains all except the debugging, variable and		message watcher request codes, which this engine does not support.   ----------------------------------------------------------------------------- */enum {	xreqZeroTermHandle = 32,	xreqPrintTEHandle,	xreqSendHCEvent,	xreqHCWordBreakProc,	xreqBeginXSound,	xreqEndXSound,	xreqRunHandler,	xreqGetXResInfo = 40,	xreqFrontDocWindow = 42,	xreqPointToStr,	xreqRectToStr,	xreqStrToPoint,	xreqStrToRect,	xreqGetFieldTE,	xreqSetFieldTE,	xreqStackNameToNum = 52,	xreqNotify,	xreqNewXWindow = 100,	xreqCloseXWindow,	xreqSetXWIdleTime,	xreqXWHasInterruptCode,	xreqRegisterXWMenu,	xreqBeginXWEdit,	xreqXWAllowReEntrancy = 109,	// Conflicts with OMO's XCMD_GetHandleSize() callback.	xreqSendWindowMessage = 110,	// Conflicts with OMO's XCMD_ResizeHandle() callback.	xreqHideHCPalettes = 111,	xreqShowHCPalettes};/* --------------------------------------------------------------------------------	SuperCard XCMD request codes:		These are additional callbacks for XCMDs introduced with IncWell SuperCard.   ----------------------------------------------------------------------------- */enum {	xreqInstallPData		= 4503,	xreqPixByName			= 5000,	xreqPixByID,	xreqPixByNum,	xreqAddStar,	xreqGetStarByName,	xreqGetStarById,	xreqDelStarByName,	xreqDelStarById,	xreqAltStarByName,	xreqAltStarById,	xreqCountStars,	xreqGetStarInfo,	xreqSendError,	xreqSetStarId,	xreqDefUProp,	xreqUnDefUProp,	xreqGetUProp,	xreqSetUProp,	xreqCountUProps,	xreqGetUPropIdx,	xreqSetUPropIdx,	xreqUPropNameToIdx,	xreqUPropIdxToName};/* --------------------------------------------------------------------------------	Media Objects XCMD request codes:		The following are only supported by Oracle Media Objects. They help making		x-platform development easier and engine owners should encourage use of		these IMO. I left out "GetOMOInstance" (150) since I couldn't make sense		of it.   ----------------------------------------------------------------------------- */enum {	xreqAllocHandle			= 107,	xreqFreeHandle			= 108,	xreqGetHandleSize		= 109,	// Conflicts with HC 2.x's XWAllowReEntrancy callback.	xreqResizeHandle		= 110	// Conflicts with HC 2.x's SendWindowMessage callback.};/* --------------------------------------------------------------------------------	Additional x-platform helper callbacks, introduced with the Carbonized xCmd	and xFcn protocol.   ----------------------------------------------------------------------------- */enum {	xreqLockHandle			= 20000,	/* Maps to HLock() on Mac. */	xreqUnlockHandle		= 20001,	/* Maps to HUnlock() on Mac. */	xreqGetHandleChars		= 20002		/* Equivalent to dereferencing a Handle on Mac. */};/* --------------------------------------------------------------------------------	XWindow event Constants:		The following are only supported by HyperCard 2.x   ----------------------------------------------------------------------------- */enum {	xParamCountEvents		= -1	// Special value for paramCount when we're receiving an event.};/* --------------------------------------------------------------------------------	XWindow event kinds:		These are additional event kinds that may be passed in the event record's		what field when we're receiving an XWindow event.   ----------------------------------------------------------------------------- */enum {	xOpenEvt				= 1000,	/* the first event after you are created */	xCloseEvt				= 1001,	/* your window is being forced close (Quit?) */	xGiveUpEditEvt			= 1002,	/* you are losing Edit... */	xGiveUpSoundEvt			= 1003,	/* you are losing the sound channel... */	xHidePalettesEvt		= 1004,	/* someone called HideHCPalettes */	xShowPalettesEvt		= 1005,	/* someone called ShowHCPalettes */	xEditUndo				= 1100,	/* Edit--Undo */	xEditCut				= 1102,	/* Edit--Cut */	xEditCopy				= 1103,	/* Edit--Copy */	xEditPaste				= 1104,	/* Edit--Paste */	xEditClear				= 1105,	/* Edit--Clear */	xSendEvt				= 1200,	/* script has sent you a message (text) */	xSetPropEvt				= 1201,	/* set a window property */	xGetPropEvt				= 1202,	/* get a window property */	xCursorWithin			= 1300,	/* cursor is within the window */	xMenuEvt				= 1400,	/* user has selected an item in your menu */	xMBarClickedEvt			= 1401	/* a menu is about to be shown--update if needed */};/* --------------------------------------------------------------------------------	Callback Glue Routines:   ----------------------------------------------------------------------------- */pascal void		BoolToStr( XCmdBlockPtr paramPtr, Boolean theBool, Str255 myStr );pascal void		ZeroToPas( XCmdBlockPtr paramPtr, char	*zeroStr,							StringPtr pasStr );pascal void		ZeroBytes( XCmdBlockPtr paramPtr, Ptr dstPtr, long longCount );pascal long		StrToNum( XCmdBlockPtr paramPtr, Str255 str );pascal long		StrToLong( XCmdBlockPtr paramPtr, Str255 strPtr );pascal void		StrToExt( XCmdBlockPtr paramPtr, Str255 str, double *myext );pascal Boolean	StrToBool( XCmdBlockPtr paramPtr, Str255 str );pascal Ptr		StringMatch( XCmdBlockPtr paramPtr, StringPtr pattern, Ptr target );pascal long		StringLength( XCmdBlockPtr paramPtr, StringPtr strPtr );pascal Boolean	StringEqual( XCmdBlockPtr paramPtr, unsigned char *str1,							unsigned char *str2 );pascal void		SetGlobal( XCmdBlockPtr paramPtr, StringPtr globName, Handle globValue );pascal void		SetFieldByNum( XCmdBlockPtr paramPtr, Boolean cardFieldFlag,							short fieldNum, Handle fieldVal );pascal void		SetFieldByName( XCmdBlockPtr paramPtr, Boolean cardFieldFlag,							StringPtr fieldName, Handle fieldVal );pascal void		SetFieldByID( XCmdBlockPtr paramPtr, Boolean cardFieldFlag,							short fieldID, Handle fieldVal );pascal void		SendCardMessage( XCmdBlockPtr paramPtr, StringPtr msg );pascal void		ScanToZero( XCmdBlockPtr paramPtr, Ptr *scanHndl );pascal void		ScanToReturn( XCmdBlockPtr paramPtr, Ptr *scanHndl );pascal void		ReturnToPas( XCmdBlockPtr paramPtr, Ptr zeroStr, StringPtr pasStr );pascal Handle	PasToZero( XCmdBlockPtr paramPtr, StringPtr pasStr );pascal void		NumToStr( XCmdBlockPtr paramPtr, long num, Str255 mystr);pascal void		NumToHex( XCmdBlockPtr paramPtr, long num, short nDigits, Str255 mystr );pascal void		LongToStr( XCmdBlockPtr paramPtr, long posNum, Str255 mystr );pascal Handle	GetGlobal( XCmdBlockPtr paramPtr, StringPtr globName );pascal Handle	GetFieldByNum( XCmdBlockPtr paramPtr, Boolean cardFieldFlag,							short fieldNum );pascal Handle	GetFieldByName( XCmdBlockPtr paramPtr, Boolean cardFieldFlag,							StringPtr fieldName );pascal Handle	GetFieldByID( XCmdBlockPtr paramPtr, Boolean cardFieldFlag,							short fieldID );pascal void		ExtToStr( XCmdBlockPtr paramPtr, double *myext, Str255 mystr );pascal Handle	EvalExpr( XCmdBlockPtr paramPtr, StringPtr expr );pascal Handle	XCMD_AllocHandle( XCmdBlockPtr paramPtr, long inSize );pascal void		XCMD_FreeHandle( XCmdBlockPtr paramPtr, Handle h );pascal long		XCMD_GetHandleSize( XCmdBlockPtr paramPtr, Handle h );pascal void		XCMD_ResizeHandle( XCmdBlockPtr paramPtr, Handle h, long inSize );pascal void		XCMD_LockHandle( XCmdBlockPtr paramPtr, Handle h );pascal void		XCMD_UnlockHandle( XCmdBlockPtr paramPtr, Handle h );pascal char*	XCMD_GetHandleChars( XCmdBlockPtr paramPtr, Handle h );#endif /*CARBONXCMD_H*/
/*	***************************************************************************	PROJECT:	KExternalCall		FILE:		KExternalCall.cpp		PURPOSE:	Call one XCMD or XFCN.			COPYRIGHT:	(C) Copyright 1999-2001 by M. Uli Kusterer, all rights reserved.					REACH ME AT:				E-MAIL:		witness@zathras.de				URL:		http://www.zathras.de			REVISIONS:		1999-07-20	UK		Created.					************************************************************************ */#pragma mark [Headers]/* --------------------------------------------------------------------------------	Headers:   ----------------------------------------------------------------------------- */#include	"KExternalCall.h"#include	"KExternalCallback.h"#pragma mark [Globals]/* --------------------------------------------------------------------------------	Globals/Static Variables:   ----------------------------------------------------------------------------- */KCallbkMap				KExternalCall::mCallbacks;			// List of all supported callbacks.KExternalCall*			gCurrentExternal = NULL;	// Current X being called. *not* thread-safe!#pragma mark -#pragma mark [Init/Kill]/* --------------------------------------------------------------------------------	¥ CONSTRUCTOR:		Do some initialization.		TAKES:		-			GIVES:		-		REVISIONS:		1999-07-20	UK		Created.   ----------------------------------------------------------------------------- */KExternalCall::KExternalCall( XCMDProcUPP theProc ){	mEntryPoint = theProc;	mParamPtr.entryPoint = NewXCMDCallbackProc(&Callback);}/* --------------------------------------------------------------------------------	¥ DESTRUCTOR:		Do some cleanup.		REVISIONS:		1999-07-20	UK		Created.   ----------------------------------------------------------------------------- */KExternalCall::~KExternalCall(){	DisposeXCMDProc( mEntryPoint );	DisposeXCMDCallbackProc(mParamPtr.entryPoint);}#pragma mark [Class Methods]/* --------------------------------------------------------------------------------	Run:		Load the X and run it. If you override this, never forget to set up		gCurrentExternal and to restore it again around the call to the XCMD or		your callbacks will happen in the wrong param block.		TAKES:		params -	Array of up to 16 Handles to C strings that are passed as					parameters to the X. You allocate this, you dispose of it.		pCount -	The number of parameters in params.		GIVES:		char** -	The return value of the X (what goes into "the result" for					XCMDs). You are responsible for disposing this. If the XCMD					did not specify a result, this may be NULL.		REVISIONS:		2001-02-16	UK		Reintroduced Mac-specific stuff as redefinable macros.							Let result default to NULL.		2001-02-15	UK		Removed Mac-specific stuff in favor of using a uniform							scheme for registering our Xes.		1999-07-22	UK		Added params & return value.		1999-07-21	UK		Created.   ----------------------------------------------------------------------------- */Handle	KExternalCall::Run( Handle params[], short pCount ){	KExternalCall*		vPrevCall;	short				x;		// Remember previous X:	vPrevCall = gCurrentExternal;	gCurrentExternal = this;		ClearParamBlock();	for( x = 0; x < pCount; x++ )		mParamPtr.params[x] = params[x];	mParamPtr.paramCount = pCount;		CallXCMDProc( mEntryPoint, &mParamPtr );		// Restore previous X:	gCurrentExternal = vPrevCall;		// Return return value:	return mParamPtr.returnValue;}/* --------------------------------------------------------------------------------	ClearParamBlock:		Initialize this XCMD's param block to default values.		TAKES:		-		GIVES:		-		REVISIONS:		1999-07-21	UK		Created.   ----------------------------------------------------------------------------- */void	KExternalCall::ClearParamBlock(){	long		x;		mParamPtr.paramCount = 0;		for( x = 0; x < 16; x++ )		mParamPtr.params[x] = NULL;		mParamPtr.returnValue = NULL;	mParamPtr.passFlag = false;	mParamPtr.request = 0;	mParamPtr.result = xresSucc;		for( x = 0; x < 8; x++ )		mParamPtr.inArgs[x] = NULL;		for( x = 0; x < 4; x++ )		mParamPtr.outArgs[x] = NULL;}/* --------------------------------------------------------------------------------	AddCallback:		Register a callback with the engine.		TAKES:		inCallbk -	A callback object to add.		GIVES:		-		REVISIONS:		1999-07-21	UK		Created.   ----------------------------------------------------------------------------- */void	KExternalCall::AddCallback( KExternalCallback* inCallbk ){	if( inCallbk == NULL )		// Allows passing new object w/o check.		return;		// Might want to throw exception instead.		mCallbacks[ inCallbk->GetRequestCode() ] = inCallbk;}/* --------------------------------------------------------------------------------	RunCallback:		Called by Callback to dispatch the callback to the correct object in our		registry.		TAKES:		-		GIVES:		-		REVISIONS:		1999-07-21	UK		Created.   ----------------------------------------------------------------------------- */void	KExternalCall::RunCallback(){	KExternalCallback*	vCallback;		vCallback = mCallbacks[mParamPtr.request];		if( vCallback )	// Is supported?	{		try		{			vCallback->Run( &gCurrentExternal->mParamPtr );		}		catch( std::exception& err )		{			mParamPtr.result = xresFail;		}	}	else		mParamPtr.result = xresNotImp;}#pragma mark -/* --------------------------------------------------------------------------------	Callback:		Called by XCMD to give control back to us. The XCMD's KExternalCall object		is in gCurrentExternal. We call that object's RunCallback() method to do		the actual work.		TAKES:		-		GIVES:		-		REVISIONS:		1999-07-21	UK		Created.   ----------------------------------------------------------------------------- */pascal void		Callback( void ){	gCurrentExternal->RunCallback();}
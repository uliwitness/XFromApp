/*	***************************************************************************	PROJECT:	C++ XFromApp		FILE:		XFromAppUPPs.h		PURPOSE:	Universal Procedure Pointer macro definitions to call XCMDs,				XFCNs, xcmds, xfcns etc. on Classic MacOS (68k or PowerPC)				and on Carbon.			COPYRIGHT:	(C) Copyright 1999-2001 by M. Uli Kusterer, all rights reserved.					REACH ME AT:				E-MAIL:		witness@zathras.de				URL:		http://www.zathras.de		DESCRIPTION:		This defines the same macros and data types to be several different		things depending on the current platform. If we're running on 68k or		Carbon Macs, the macros just map to straight () operator calls to		execute the functions. However, for Classic PowerPC Macs, we do some		magic with UPPs so we can call both 680x0 Xes and PowerPC ones.		REVISIONS:		2001-02-16	UK		Added Carbon support.		1999-07-20	UK		Created.					************************************************************************ */#ifndef XFROMAPPUPPS_H#define XFROMAPPUPPS_H		1#pragma mark [Headers]/* --------------------------------------------------------------------------------	Headers:   ----------------------------------------------------------------------------- */#if __MWERKS__  #include	<MixedMode.h>  #include	<ConditionalMacros.h>#else  #include	<Carbon/Carbon.h>  #if TARGET_RT_MAC_MACHO    #include	"MachOCFMGlue.h"  #endif#endif/* --------------------------------------------------------------------------------	Forwards:   ----------------------------------------------------------------------------- */typedef struct XCmdBlock	*XCmdBlockPtr;/* --------------------------------------------------------------------------------	Old-style procedure pointers:   ----------------------------------------------------------------------------- */typedef pascal void (*XCMDProcPtr)( XCmdBlockPtr );typedef pascal void (*XCMDCallbackProcPtr)( void );/* --------------------------------------------------------------------------------	UPP Data types:   ----------------------------------------------------------------------------- */// Carbon is CFM but doesn't allow custom UPPs, so check that first:#if TARGET_API_MAC_CARBON  typedef XCMDProcPtr			XCMDProcUPP;  typedef XCMDCallbackProcPtr	XCMDCallbackProcUPP;// Other CFM? Must be Classic PowerPC which has custom UPPs:#elif TARGET_RT_MAC_CFM  typedef UniversalProcPtr		XCMDProcUPP;  typedef UniversalProcPtr		XCMDCallbackProcUPP;// Anything else is either 680x0 or another platform that doesn't need UPPs:#else  typedef XCMDProcPtr			XCMDProcUPP;  typedef XCMDCallbackProcPtr	XCMDCallbackProcUPP;#endif/* --------------------------------------------------------------------------------	ProcInfo with UPP calling conventions:   ----------------------------------------------------------------------------- */#if TARGET_API_MAC_CARBON// Just avoid that we try to declare a custom UPP type under Carbon.#elif TARGET_RT_MAC_CFMenum {	uppXCMDProcInfo = kPascalStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(XCmdBlockPtr))),	uppXCMDCallbackProcInfo = kPascalStackBased};#endif/* --------------------------------------------------------------------------------	Calls to create new UPPs:   ----------------------------------------------------------------------------- */#if TARGET_RT_MAC_MACHO  #define	NewXCMDProc(userRoutine)		\			((XCMDProcUPP) MachOFunctionPointerForCFMFunctionPointer(userRoutine))  #define	NewXCMDCallbackProc(userRoutine)	\			((XCMDCallbackProcUPP) CFMFunctionPointerForMachOFunctionPointer(userRoutine))#elif TARGET_API_MAC_CARBON  #define	NewXCMDProc(userRoutine)		\				((XCMDProcUPP) (userRoutine))  #define	NewNativeXCMDProc(userRoutine)		\				((XCMDProcUPP) (userRoutine))  #define	NewXCMDCallbackProc(userRoutine)		\				((XCMDCallbackProcUPP) (userRoutine))#elif TARGET_RT_MAC_CFM// This is the 68k UPP for calling old-style XCMDs in Classic PowerPC:  #define	NewXCMDProc( userRoutine )		\				(XCMDProcUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppXCMDProcInfo, ( ((ISAType) kM68kISA) | ((RTAType) kOld68kRTA) ))// This is the native UPP for xcmds in Classic PowerPC:  #define	NewNativeXCMDProc( userRoutine )		\				(XCMDProcUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppXCMDProcInfo, ( ((ISAType) kPowerPCISA) | ((RTAType) kPowerPCRTA) ))// UPP so our Callback proc can be native when using 68k XCMDs  #define	NewXCMDCallbackProc( userRoutine )		\				(XCMDCallbackProcUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppXCMDCallbackProcInfo, GetCurrentArchitecture())#else  #define	NewXCMDProc(userRoutine)		\				((XCMDProcUPP) (userRoutine))  #define	NewNativeXCMDProc(userRoutine)		\				((XCMDProcUPP) (userRoutine))  #define	NewXCMDCallbackProc(userRoutine)		\				((XCMDCallbackProcUPP) (userRoutine))#endif/* --------------------------------------------------------------------------------	Calls to Call UPPs:   ----------------------------------------------------------------------------- */#if TARGET_API_MAC_CARBON  #define	CallXCMDProc(userRoutine, blockPtr)		\				(*(userRoutine))((blockPtr))  #define	CallXCMDCallbackProc(userRoutine)		\				(*(userRoutine))()#elif TARGET_RT_MAC_CFM// This is used by the engine to run an XCMD:  #define	CallXCMDProc(userRoutine, blockPtr)		\				CallUniversalProc((UniversalProcPtr)(userRoutine), uppXCMDProcInfo, (blockPtr))// This is used by the XCMD to call back to us on Classic PowerPC systems:  #define	CallXCMDCallbackProc(userRoutine)		\				CallUniversalProc((UniversalProcPtr)(userRoutine), uppXCMDCallbackProcInfo)#else  #define	CallXCMDProc(userRoutine, blockPtr)		\				(*(userRoutine))((blockPtr))  #define	CallXCMDCallbackProc(userRoutine)		\				(*(userRoutine))()#endif/* --------------------------------------------------------------------------------	Calls to get rid of UPPs:   ----------------------------------------------------------------------------- */#if TARGET_RT_MAC_MACHO  #define DisposeXCMDProc(userRoutine)				\				DisposeMachOFunctionPointer(userRoutine)  #define DisposeXCMDCallbackProc(userRoutine)				\				DisposeCFMFunctionPointer(userRoutine)#elif TARGET_API_MAC_CARBON  #define DisposeXCMDProc(userRoutine)				  #define DisposeXCMDCallbackProc(userRoutine)		#elif TARGET_RT_MAC_CFM  #define DisposeXCMDProc(userRoutine)				\				DisposeRoutineDescriptor(userRoutine)  #define DisposeXCMDCallbackProc(userRoutine)				\				DisposeRoutineDescriptor(userRoutine)#else  #define DisposeXCMDProc(userRoutine)				  #define DisposeXCMDCallbackProc(userRoutine)		#endif#endif /*XFROMAPPUPPS_H*/
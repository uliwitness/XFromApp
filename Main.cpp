/* Testing application for XFromApp 2.0 */#include <iostream>#include <cstdio>#include <cstdlib>#include <ctime>#include "KExternalCall.h"#include "MacExternalCall.h"// Callback objects for registry:#include "KStringEqualCallback.h"#include "KStrToNumCallback.h"#include "KStrToLongCallback.h"#include "KZeroToPasCallback.h"#include "KGetFieldByIDCallback.h"#include "KGetFieldByNumCallback.h"#include "KGetFieldByNameCallback.h"#include "KSetFieldByIDCallback.h"#include "KSetFieldByNumCallback.h"#include "KSetFieldByNameCallback.h"#include "KScanToZeroCallback.h"#include "KScanToReturnCallback.h"#include "KZeroBytesCallback.h"#include "KAllocHandleCallback.h"#include "KFreeHandleCallback.h"#include "KResizeHandleCallback.h"#include "KGetHandleSizeCallback.h"#include "KGetHandleCharsCallback.h"#include "KLockHandleCallback.h"#include "KUnlockHandleCallback.h"Handle	MakeStringHandle( const char* str );template<class T>void	RegisterCallback( const char* vName ){	T*		vCallbackObj;		vCallbackObj = new T;	std::cout << "\t" << vName << " (" << vCallbackObj->GetRequestCode() << ")" << std::endl;	KExternalCall::AddCallback( vCallbackObj );}int main(void){	XCMDProcUPP				vTheProc;	Handle					vParams[1];	Handle					vResult;		/* The following are the callbacks we want to register:	KStringEqualCallback	vStringEqualCbk;	KStrToNumCallback		vStrToNumCbk;	KStrToLongCallback		vStrToLongCbk;	KZeroToPasCallback		vZeroToPasCbk;	KGetFieldByIDCallback	vGetFieldByIDCbk;	KGetFieldByNumCallback	vGetFieldByNumCbk;	KGetFieldByNameCallback	vGetFieldByNameCbk;	KSetFieldByIDCallback	vSetFieldByIDCbk;	KSetFieldByNumCallback	vSetFieldByNumCbk;	KSetFieldByNameCallback	vSetFieldByNameCbk;	KScanToZeroCallback		vScanToZeroCbk;	KScanToReturnCallback	vScanToReturnCbk;	KZeroBytesCallback		vZeroBytesCbk;		KAllocHandleCallback	vAllocHandleCbk;	KFreeHandleCallback		vFreeHandleCbk;	KResizeHandleCallback	vResizeHandleCbk;	KGetHandleSizeCallback	vGetHandleSizeCbk;	KLockHandleCallback		vLockHandleCbk;	KUnlockHandleCallback	vUnlockHandleCbk;	KGetHandleCharsCallback	vGetHandleCharsCbk;*/		try	{		// Register callbacks:		std::cout << "Registering XCMD callbacks." << std::endl;		RegisterCallback<KStringEqualCallback>("StringEqual");		RegisterCallback<KStrToNumCallback>("StrToNum");		RegisterCallback<KStrToLongCallback>("StrToLong");		RegisterCallback<KZeroToPasCallback>("ZeroToPas");		RegisterCallback<KGetFieldByIDCallback>("GetFieldByID");		RegisterCallback<KGetFieldByNumCallback>("GetFieldByNum");		RegisterCallback<KGetFieldByNameCallback>("GetFieldByName");		RegisterCallback<KSetFieldByIDCallback>("SetFieldByID");		RegisterCallback<KSetFieldByNumCallback>("SetFieldByNum");		RegisterCallback<KSetFieldByNameCallback>("SetFieldByName");		RegisterCallback<KScanToZeroCallback>("ScanToZero");		RegisterCallback<KScanToReturnCallback>("ScanToReturn");		RegisterCallback<KZeroBytesCallback>("ZeroBytes");		std::cout << std::endl;		RegisterCallback<KAllocHandleCallback>("XCMD_AllocHandle");		RegisterCallback<KFreeHandleCallback>("XCMD_FreeHandle");		RegisterCallback<KResizeHandleCallback>("XCMD_ResizeHandle");		RegisterCallback<KGetHandleSizeCallback>("XCMD_GetHandleSize");		RegisterCallback<KLockHandleCallback>("XCMD_LockHandle");		RegisterCallback<KUnlockHandleCallback>("XCMD_UnlockHandle");		RegisterCallback<KGetHandleCharsCallback>("XCMD_GetHandleChars");				/*		std::cout << "\tStringEqual (" << vStringEqualCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vStringEqualCbk );		std::cout << "\tStrToNum (" << vStrToNumCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vStrToNumCbk );		std::cout << "\tStrToLong (" << vStrToLongCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vStrToLongCbk );		std::cout << "\tZeroToPas (" << vZeroToPasCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vZeroToPasCbk );		std::cout << "\tGetFieldByID (" << vGetFieldByIDCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vGetFieldByIDCbk );		std::cout << "\tGetFieldByNum (" << vGetFieldByNumCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vGetFieldByNumCbk );		std::cout << "\tGetFieldByName (" << vGetFieldByNameCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vGetFieldByNameCbk );		std::cout << "\tSetFieldByID (" << vSetFieldByIDCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vSetFieldByIDCbk );		std::cout << "\tSetFieldByNum (" << vSetFieldByNumCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vSetFieldByNumCbk );		std::cout << "\tSetFieldByName (" << vSetFieldByNameCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vSetFieldByNameCbk );		std::cout << "\tScanToZero (" << vScanToZeroCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vScanToZeroCbk );		std::cout << "\tScanToReturn (" << vScanToReturnCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vScanToReturnCbk );		std::cout << "\tZeroBytes (" << vZeroBytesCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vZeroBytesCbk );		std::cout << endl;		std::cout << "\tXCMD_AllocHandle (" << vAllocHandleCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vAllocHandleCbk );		std::cout << "\tXCMD_FreeHandle (" << vFreeHandleCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vFreeHandleCbk );		std::cout << "\tXCMD_ResizeHandle (" << vResizeHandleCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vResizeHandleCbk );		std::cout << "\tXCMD_GetHandleSize (" << vGetHandleSizeCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vGetHandleSizeCbk );		std::cout << "\tXCMD_LockHandle (" << vLockHandleCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vLockHandleCbk );		std::cout << "\tXCMD_UnlockHandle (" << vUnlockHandleCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vUnlockHandleCbk );		std::cout << "\tXCMD_GetHandleChars (" << vGetHandleCharsCbk.GetRequestCode() << ")" << endl;		KExternalCall::AddCallback( &vGetHandleCharsCbk );*/				// Get the X:		std::cout << "Fetching XCMD \"flash\"..." << std::endl;		vTheProc = GetMacintoshExternal( false, "flash" );				// Make an object to run:		std::cout << "Generating object..." << std::endl;		KExternalCall		vTheCall( vTheProc );				// Make Handles to params:		std::cout << "\tSetting up parameters." << std::endl;		vParams[0] = MakeStringHandle( "3" );				// Run it!		std::cout << "Calling XCMD..." << std::endl;		vResult = vTheCall.Run( vParams, 1 );		if( vResult )		{			std::cout << "Result: " << *vResult << std::endl;			DisposeHandle( vResult );		}				std::cout << "Finished." << std::endl;	}	catch( std::exception& err )	{		std::cout << std::endl << "Error: " << err.what() << std::endl;	}		return 0;}Handle	MakeStringHandle( const char* str ){	long		len = std::strlen(str);	Handle		vHandle;		vHandle = NewHandle( len+1 );	if( vHandle != NULL && MemError() == noErr )		std::memmove( *vHandle, str, len+1 );		return vHandle;}
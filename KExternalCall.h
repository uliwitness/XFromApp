/*	***************************************************************************	PROJECT:	KExternalCall		FILE:		KExternalCall.h		PURPOSE:	Call one XCMD or XFCN.			COPYRIGHT:	(C) Copyright 1999 by M. Uli Kusterer, all rights reserved.					REACH ME AT:				E-MAIL:		witness@zathras.de				URL:		http://www.zathras.de			REVISIONS:		1999-07-21	UK		Added mCallbacks and accessors.		1999-07-20	UK		Created.					************************************************************************ */#ifndef KEXTERNALCALL_H#define KEXTERNALCALL_H		1#pragma mark [Data Types]/* --------------------------------------------------------------------------------	Headers:   ----------------------------------------------------------------------------- */#ifndef __MWERKS__#include	<Carbon/Carbon.h>#endif#include	<map>#include	<string>#include	"FakeHandles.h"#include	"XFromAppUPPs.h"#pragma mark [Data Types]/* --------------------------------------------------------------------------------	Data Types:   ----------------------------------------------------------------------------- *//* Pointer to our callback function: *///typedef pascal void (*XCMDCallbackProcPtr)( void );#if PRAGMA_STRUCT_ALIGN	#pragma options align=mac68k#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(push, 2)#elif PRAGMA_STRUCT_PACK	#pragma pack(2)#endifstruct XCmdBlock{	short					paramCount;     	Handle					params[16];	Handle					returnValue;      	Boolean					passFlag;	XCMDCallbackProcUPP		entryPoint;		// Points to callback function below.	short					request;  	short					result;  	long					inArgs[8];	long					outArgs[4];};typedef struct XCmdBlock XCmdBlock, *XCmdBlockPtr;#if PRAGMA_STRUCT_ALIGN	#pragma options align=reset#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(pop)#elif PRAGMA_STRUCT_PACK	#pragma pack()#endif/* Pointer to an XCMD's main entry point: *///typedef pascal void (*XCMDProcPtr)( XCmdBlockPtr );class KExternalCallback;typedef std::map<short,KExternalCallback*>	KCallbkMap;typedef std::map<std::string,XCMDProcPtr>		KExternalMap;#pragma mark [Constants]/* --------------------------------------------------------------------------------	Constants:   ----------------------------------------------------------------------------- */enum{	MAX_X_NAME_LENGTH		= 256		// Maximal length of an XCMD name (including zero byte).};#pragma mark [Class Declaration]/* --------------------------------------------------------------------------------	Class declaration:   ----------------------------------------------------------------------------- */class	KExternalCall{protected:	XCmdBlock		mParamPtr;				// The param pointer used for passing parameters.	XCMDProcUPP		mEntryPoint;			// Entry point to this external.		static KCallbkMap	mCallbacks;			// Array of callbacks we support.public:			KExternalCall( XCMDProcUPP theProc );	virtual	~KExternalCall();		// Call this to register a callback (globally):	static void		AddCallback( KExternalCallback* inCallbk );		// Call this to run the X:	virtual Handle	Run( Handle params[], short pCount );		// Called by Callback() function:	virtual void	RunCallback();	void			ClearParamBlock();};#pragma mark [Prototypes]/* --------------------------------------------------------------------------------	Prototypes:   ----------------------------------------------------------------------------- */pascal void	Callback( void );#endif /*KEXTERNALCALL_H*/